# -*- coding: utf-8 -*-
"""Bonsai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Co_fvqgyF4FeO1VoXrvlvlvH5ToxwgCw
"""

import numpy as np

"""# Calificaciones del estudiante en cada habilidad"""

calificaciones = [75, 35, 80, 55, 25, 90, 75, 60, 100, 45]

"""# Matriz de superposiciones entre habilidades"""

matriz_superposiciones = np.array([
    [0.7, 0.099, 0.099, 0.0, 0.099, 0.0, 0.0, 0.0, 0.0, 0.0],
    [0.099, 0.099, 0.0, 0.0, 0.7, 0.0, 0.099, 0.0, 0.0, 0.0],
    [0.099, 0.099, 0.099, 0.0, 0.0, 0.7, 0.0, 0.0, 0.0, 0.0],
    [0.0, 0.0, 0.0, 0.0, 0.15, 0.0, 0.7, 0.0, 0.0, 0.15],
    [0.0, 0.0, 0.099, 0.0, 0.099, 0.0, 0.0, 0.7, 0.099, 0.0],
    [0.0, 0.0, 0.0, 0.099, 0.0, 0.0, 0.0, 0.099, 0.7, 0.099],
    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.15, 0.0, 0.15, 0.7]
])

"""# Calcula las probabilidades de pertenencia a cada conjunto de habilidades"""

probabilidades = np.dot(matriz_superposiciones, calificaciones)

"""# Normaliza las probabilidades para que sumen 1"""

probabilidades_normalizadas = probabilidades / np.sum(probabilidades)

print(probabilidades_normalizadas)

print(probabilidades)

# Definir la matriz de superposición (puedes ajustar los valores)
matriz_superposicion = np.array([
    [0.5, 0.2, 0.3, 0.1, 0.1, 0.2, 0.15, 0.05, 0.25, 0.1],
    [0.2, 0.4, 0.15, 0.05, 0.1, 0.2, 0.1, 0.05, 0.15, 0.1],
    [0.3, 0.15, 0.6, 0.2, 0.1, 0.25, 0.2, 0.1, 0.3, 0.15],
    [0.1, 0.05, 0.2, 0.3, 0.05, 0.1, 0.1, 0.05, 0.1, 0.1],
    [0.1, 0.1, 0.1, 0.05, 0.2, 0.1, 0.15, 0.1, 0.05, 0.05],
    [0.2, 0.2, 0.25, 0.1, 0.1, 0.5, 0.2, 0.15, 0.25, 0.15],
    [0.15, 0.1, 0.2, 0.1, 0.15, 0.2, 0.3, 0.15, 0.2, 0.1],
    [0.05, 0.05, 0.1, 0.05, 0.1, 0.15, 0.15, 0.3, 0.05, 0.05],
    [0.25, 0.15, 0.3, 0.1, 0.05, 0.25, 0.2, 0.05, 0.6, 0.25],
    [0.1, 0.1, 0.15, 0.1, 0.05, 0.15, 0.1, 0.05, 0.25, 0.3]
])

# Calificaciones actuales del estudiante (ajusta los valores)
calificaciones_actuales = np.array([0.78, 0.32, 0.76, 0.52, 0.35, 0.94, 0.7, 0.64, 1.0, 0.53])

# Calcular las probabilidades no normalizadas
probabilidades_no_normalizadas = np.dot(matriz_superposicion, calificaciones_actuales)

# Normalizar las probabilidades
probabilidades_normalizadas = probabilidades_no_normalizadas / np.sum(probabilidades_no_normalizadas)

# Mostrar las probabilidades normalizadas
print("Probabilidades Normalizadas:")
for i, probabilidad in enumerate(probabilidades_normalizadas):
    print(f"Habilidad {i + 1}: {probabilidad:.8f}")

# Calcular la suma de las probabilidades normalizadas
suma_probabilidades = np.sum(probabilidades_normalizadas)
print(f"\nSuma de las probabilidades normalizadas: {suma_probabilidades:.8f}")

# Matriz de superposición con las ecuaciones planteadas
matriz_superposicion = [
    [0, 0.33, 0.33, 0, 0.33, 0, 0, 0, 0, 0],
    [0.33, 0, 0, 0, 0.33, 0.33, 0, 0, 0, 0],
    [0.33, 0, 0, 0, 0.33, 0.33, 0, 0, 0, 0],
    [0, 0, 0.33, 0, 0, 0, 0, 0.33, 0.33, 0],
    [0.33, 0.33, 0, 0, 0, 0, 0.33, 0, 0, 0],
    [0.33, 0.33, 0.33, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5],
    [0, 0, 0.33, 0, 0.33, 0, 0, 0, 0.33, 0],
    [0, 0, 0, 0.33, 0, 0, 0, 0.33, 0, 0.33],
    [0, 0, 0, 0, 0, 0, 0.5, 0, 0.5, 0]
]

# Calificaciones normalizadas del estudiante
calificaciones_estudiante = [0.75, 0.35, 0.80, 0.55, 0.25, 0.90, 0.75, 0.60, 1.00, 0.45]

# Calcular las probabilidades
probabilidades = [sum(a * b for a, b in zip(fila, calificaciones_estudiante)) for fila in matriz_superposicion]

# Imprimir las probabilidades
for i, probabilidad in enumerate(probabilidades):
    print(f'Probabilidad de pertenecer al conjunto {chr(65 + i)}: {probabilidad:.2f}')

matriz_superposiciones = np.array([
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
])
matriz_superposicion = np.array([
    [0, 0.33, 0.33, 0, 0.33, 0, 0, 0, 0, 0],
    [0.33, 0, 0, 0, 0.33, 0.33, 0, 0, 0, 0],
    [0.33, 0, 0, 0, 0.33, 0.33, 0, 0, 0, 0],
    [0, 0, 0.33, 0, 0, 0, 0, 0.33, 0.33, 0],
    [0.33, 0.33, 0, 0, 0, 0, 0.33, 0, 0, 0],
    [0.33, 0.33, 0.33, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5],
    [0, 0, 0.33, 0, 0.33, 0, 0, 0, 0.33, 0],
    [0, 0, 0, 0.33, 0, 0, 0, 0.33, 0, 0.33],
    [0, 0, 0, 0, 0, 0, 0.5, 0, 0.5, 0]
])

# Definir los factores de ponderación
factor_superposiciones = 0.7
factor_superposicion = 0.3

# Combinar las matrices con los factores de ponderación
matriz_combinada = (factor_superposiciones * matriz_superposiciones) + (factor_superposicion * matriz_superposicion)

# La matriz combinada ahora refleja una combinación de ambas matrices
print(matriz_combinada)